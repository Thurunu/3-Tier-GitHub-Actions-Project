# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CICD

on: # this is the place where we configure at what time actions need to be run, so here we run this action on pushes and pull requests on main
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: self-hosted # at here we are using a shared host to run action, if we setup a self hosteed runner then we can use its name here
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: Frontend Compilation (Syntax Check)
      run: cd client && find . -name "*.js" -exec node --check {} +

    - name: Backend Compilation (Syntax Check)
      run: cd api && find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: self-hosted
    needs: compile 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GitLeaks Setup
        run: |
          gitleaks detect --source ./client --exit-code 1
          gitleaks detect --source ./api --exit-code 1

      - name: Gitleaks Scan
        run: |
          gitleaks detect --source ./client --exit-code 1
          gitleaks detect --source ./api --exit-code 1

  trivy_fs_scan:
    runs-on: self-hosted
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trviy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with: 
          scan-type: 'fs'           # "fs" = filesystem scan. Scans the current directory (your source code) for vulnerable dependencies & config issues
          scan-ref: '.'             # '.' = scan the repo root (the code you checked out). You could point this to client/ or api/ if you want to scan only part
          format: 'table'           # Output format → nice human-readable table in the Actions logs (other options: json, sarif, template…)
          ignore-unfixed: true      # Ignores vulnerabilities that don’t have a fix available yet (reduces noise, but you might miss awareness of risks)
          vuln-type: 'os,library'   # Scan both OS packages (like apt-installed things) and libraries (like npm packages in node_modules)
          severity: 'CRITICAL,HIGH' # Only report vulnerabilities at these levels. Ignores MEDIUM/LOW to keep signal-to-noise ratio better

  sonar-frontend:
    runs-on: self-hosted
    needs: trivy_fs_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: client # in this repo we have both client and server side codes so we have to mention which directory need to look
          args: >
              -Dsonar.projectKey=myorg_client
              -Dsonar.projectName=myorg_client
              -Dsonar.sources=.
              -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-backend:
    runs-on: self-hosted
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: api # in this repo we have both client and server side codes so we have to mention which directory need to look
          args: >
              -Dsonar.projectKey=myorg_api
              -Dsonar.projectName=myorg_api
              -Dsonar.sources=.
              -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
  build_backend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: userRegister/backend:latest
  build_frontend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: userRegister/frontend:latest
